<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../../docbook-customization/src/docbkx-stylesheet/common/komet.rnc" type="application/relax-ng-compact-syntax"?>
<article version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:ns5="http://www.w3.org/1999/xhtml"
    xmlns:ns4="http://www.w3.org/1998/Math/MathML"
    xmlns:ns3="http://www.w3.org/2000/svg"
    xmlns:ns="http://docbook.org/ns/docbook">
    <info>
        <title>Transformation Languages for Converting CIMI DCM Instances to SOLOR DL Expressions
        </title>
        <author>
            <personname>Walter Sujansky</personname>
        </author>
        
        <date>2017-09-30</date>
    </info>
    <section>
        <title>Introduction</title>
        <para>This whitepaper addresses processes for transforming clinical data that were collected
            using an object-oriented data model (CIMI) into semantically equivalent data structures
            represented using a description-logic model (SOLOR). The paper discusses the motivation
            for performing such transformations and evaluates several candidate languages for
            specifying and executing the transformations. Specific recommendations are made
            regarding the next steps in selecting the best language for CIMI-to-SOLOR
            transformations of clinical data.</para>
    </section>
    <section>
        <title>Motivation for CIMI to SOLOR Transformations</title>
        <para>CIMI detailed clinical models (DCMs)<footnote xml:id="__EN1__">
                <para> Goossen, W. Detailed Clinical Models: Representing Knowledge, Data and
                    Semantics in Healthcare Information Technology. Healthc Inform Res. 2014 Jul;
                    20(3): 163–172.</para>
            </footnote><superscript>,</superscript><footnote xml:id="__EN2__">
                <para>
                    <link xmlns:xlink="http://www.w3.org/1999/xlink"
                        xlink:href="http://wiki.hl7.org/index.php?title=Detailed_Clinical_Models"
                        >http://wiki.hl7.org/index.php?title=Detailed_Clinical_Models</link>
                    (Accessed 9/30/2017).</para>
            </footnote> are object-oriented templates for capturing, representing, and sharing
            clinical observation data. They define and constrain, at a conceptual-modeling level,
            the structure and the coding used to represent certain types of observations. For
            example, <xref linkend="_Ref494372786"/> shows a simplified DCM for representing pain
                symptoms<footnote xml:id="__FN1__">
                <para>The actual syntax shown is from the Clinical Event Model, a representation
                    model closely related to CIMI, but which provides a larger compendium of
                    relevant examples at this time (CIMI models are still in the process of being
                    defined).</para>
            </footnote>. </para>
        <figure xml:id="_Ref494372786">
            <title>CIMI DCM. </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/image2.png"
                        width="5.5in"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>Note that the DCM is a template that can be used to represent instances of pain
            symptoms in many different anatomical locations at different times, but always
            conforming to a single, predictable pattern. For example, <xref linkend="_Ref494372763"
            /> shows a particular instance of the Pain DCM which documents a patient’s symptom of
            pain in the right lower quadrant of the abdomen on a particular date. Note that, in this
            case, the pain instance is represented in XML, although DCMs, themselves, do not specify
            any particular rendering format.</para>
        <figure xml:id="_Ref494372763">
            <title>CIMI instance, rendered as XML. </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/image3.png"
                        width="5.5in"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>Although DCMs are very useful for standardizing the representation of clinical data to
            facilitate portability and interoperability, these models confer minimal computable
            semantics to the data represented. With the exception of supertype/subtype relationships
            (e.g. “PainAssert” is a subtype of “ClinicalAssert”, as shown in the first line of <xref
                linkend="_Ref494372786"/>), DCMs do not support logical inferencing with respect to
            patient-data instances. </para>
        <para>Logical inferencing allows computer systems to draw new, logically sound conclusions
            based on patient data. Such inferencing, which includes equivalence testing, subsumption
            testing, and attribute inferral, can be very useful in the retrieval and processing of
            clinical data for decision support, research, quality measurement, etc. </para>
        <section>
            <title>Benefitting from Description Logic Semantics</title>
            <para>Description logics (DLs) are ontological representation systems based on a subset
                of first order logic. A prominent example of a DL system in healthcare is SNOMED-CT,
                and its derivative system SOLOR. SOLOR defines a formal model for the representation
                of ontological knowledge and includes an inference engine (“reasoner”) for deriving
                new, latent information based on the represented knowledge and the rules of logic. </para>
            <para>For example, SOLOR can automatically infer that “Appendicitis” is a
                “Gastrointestinal Disease” and involves the process of “Inflammation”, based solely
                on the rules of logic and provided ontological definitions of “Gastrointestinal
                Disease”, “Gastrointestinal System”, “Appendicitis”, and “Appendix”. Such inferences
                can be useful, for example, in finding all patients who have a gastrointestinal
                disease for purposes of research, or determining why a specific patient may have a
                fever for purposes of decision support.</para>
            <para>Although SOLOR is based on a different formalism that CIMI DCMs, SOLOR
                representations of medical concepts share a number of features with CIMI DCMs.
                Specifically, both modeling systems use of an object-oriented framework that
                organizes concepts into hierarchies and specifies the features of concepts using
                attributes, which themselves can take other defined concepts as values. Hence, there
                exists the opportunity to map between CIMI DCMs and SOLOR expressions, and to
                transform CIMI data instances into SOLOR concept expressions based on these
                mappings. The sound execution of such transformations allows clinical information
                systems to capture and share data using the CIMI formalism, but then retrieve and
                analyze the data using the SOLOR formalism and the additional inferencing power it
                provides.</para>
        </section>
        <section>
            <title>Example</title>
            <para>Returning to the example of <xref linkend="_Ref494372786"/> and <xref
                    linkend="_Ref494372763"/>, imagine one wished to query a patient database to
                retrieve all patients who had experienced abdominal pain, i.e. pain located
                somewhere in the abdomen. If patient data were represented only as instances of CIMI
                DCMs, one would do this by searching for all patients who had an instance of the
                “PainAssert” DCM with the code for “Abdomen” as the value of its
                “BodyLocationPrecoord” attribute:</para>
            <para>SELECT PatientID FROM Findings WHERE Findings.CodeableConcept.Code.code =
                “22253000 (Pain)” AND Findings.BodyLocationPrecoord.CodeableConcept.Code.code =
                “7584978 (Abdomen)”</para>
            <para>However, this query would retrieve only those patients with documented pain
                located generally in the “Abdomen,” and would miss any patients with pain documented
                in sub-parts of the abdomen, such as the “Lower abdomen”, the “Right lower quadrant
                of the abdomen”, the “Epigastrium”, etc. To retrieve all patients with pain anywhere
                in the abdomen, the query would have to include all possible sub-parts of the
                abdomen, as well as the general abdomen itself:</para>
            <para>SELECT PatientID</para>
            <para>FROM Findings</para>
            <para>WHERE Findings.CodeableConcept.Code.code = “22253000 (Pain)” AND</para>
            <para> ( Findings.BodyLocationPrecoord.CodeableConcept.Code.code = “7584978 (Abdomen)”
                OR</para>
            <para> Findings.BodyLocationPrecoord.CodeableConcept.Code.code = “6487587 (Lower Abd.)”
                OR</para>
            <para> Findings.BodyLocationPrecoord.CodeableConcept.Code.code = “6487588 (RLQ of Abd.)”
                OR</para>
            <para> Findings.BodyLocationPrecoord.CodeableConcept.Code.code = “7584978 (Epigastrium)”
                OR</para>
            <para> …etc. ) </para>
            <para>The exhaustive inclusion of all such abdominal sub-parts and sub-sub-parts in
                every query that needs to specify the abdominal area would be onerous, as well as
                subject to error as the coded terminology representing these sub-parts changes over
                time. Further, formulation of queries with respect to CIMI DCM instances requires a
                detailed knowledge of the nested DCM data structure and the specific combinations of
                attributes that represent certain semantic concepts.</para>
            <para>However, there is a better alternative if one could first transform the CIMI DCM
                representations of all recorded observations into SOLOR DL representations. Such
                transformations would allow the same query to be formulated and executed more easily
                using DL inference. </para>
            <para>For example, the expression in <xref linkend="_Ref494375725"/> shows the DL
                formulation of the same<footnote xml:id="__FN2__">
                    <para>Note that this representation lacks the temporal “DateOfOnset” attribute,
                        because that attribute falls outside of the SOLOR concept model (as further
                        discussed in Section <xref linkend="_Ref494460383"/>).</para>
                </footnote> “Pain in right lower quadrant” observation represented in <xref
                    linkend="_Ref494372763"/>. <xref linkend="_Ref494375725"/> shows both the
                textual and the equivalent graphical rendition of the DL expression.</para>
            <figure xml:id="_Ref494375725">
                <title>Description-logic representation of the CIMI DCM instance shown in <xref
                        linkend="_Ref494372763"/>. </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image4.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>Initially, the DL expression in <xref linkend="_Ref494375725"/> is subsumed within
                the SOLOR concept hierarchy only by the concept “Pain,” because the expression
                explicitly specifies only that the expression is a sub-class of Pain. This
                hierarchical classification would not help a query to recognize that the patient
                with this finding, in fact, has an instance of “Abdominal pain.” However, the SOLOR
                ontology also includes the DL definition of the more specific concept “Abdominal
                Pain,” specified as follows:</para>
            <figure>
                <title>Description-logic definition of “Abdominal Pain.” </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image5.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>Based on this logical definition of “Abdominal Pain,” on the DL definitions of
                several other clinical concepts, and on formal rules of logic, a SOLOR reasoner can
                infer that the DL expression for “Pain in right lower quadrant” is subsumed by
                “Abdominal Pain.” In fact, the reasoner can correctly classify the expression into
                the subsumption hierarchy of <xref linkend="_Ref494378771"/>. Using these inferred
                subsumption relationships, the previous query to retrieve all patients who had
                experienced abdominal pain may now be reformulated as follows:</para>
            <para>SELECT PatientID FROM Findings WHERE SOLOR-Expression(Findings) Is-A
                SOLOR-Code(“Abdominal Pain”) </para>
            <para>where “SOLOR-Expression” is a function that converts the CIMI DCM instance into an
                equivalent DL expression, and SOLOR-Code(“Abdominal Pain”) is a function that
                resolves to the existing coded concept for abdominal pain in the SOLOR terminology.
                Note that “Is-A” represents a predicate that tests for subsumption between the two.
                In this manner, the power of DL semantics can greatly simplify query formulation
                against a large compendium of complex patient data collected using CIMI DCMs. </para>
            <figure xml:id="_Ref494378771">
                <title>Inferred subsumption hierarchy. </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image6.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
    </section>
    <section>
        <title>Mechanics of the Transformation Process</title>
        <para>The process to transform CIMI DCM instances to DL expressions involves certain inputs
            and outputs, and entails a certain architectural framework. These attributes create
            certain requirements for the transformation language and execution engine to be used for
            this task, and are discussed in this section.</para>
        <section>
            <title>Overview</title>
            <para><xref linkend="_Ref494394277"/> summarizes the transformation process to convert
                CIMI DCM data instances to SOLOR post-coordinated DL expressions<footnote
                    xml:id="__EN3__">
                    <para> SOLOR post-coordinated expressions are a derivative of, and very similar
                        to, SNOMED-CT post-coordinated expressions, which are formally defined in
                        the following document: <link xmlns:xlink="http://www.w3.org/1999/xlink"
                            xlink:href="http://doc.ihtsdo.org/download/doc_CompositionalGrammarSpecificationAndGuide_Current-en-US_INT_20150522.pdf"
                            >http://doc.ihtsdo.org/download/doc_CompositionalGrammarSpecificationAndGuide_Current-en-US_INT_20150522.pdf</link>
                        (Accessed 9/30/2017).</para>
                </footnote>. At the instance (“Data”) level, the task must automatically and
                faithfully transforms data represented in the CIMI object-oriented formalism to data
                represented in the SOLOR DL formalism, which consists of the EL profile of the OWL 2
                description-logic language<footnote xml:id="__EN4__">
                    <para>
                        <link xmlns:xlink="http://www.w3.org/1999/xlink"
                            xlink:href="https://www.w3.org/TR/owl2-profiles/#OWL_2_EL"
                            >https://www.w3.org/TR/owl2-profiles/#OWL_2_EL</link> (Accessed
                        9/30/2017).</para>
                </footnote>. A transformation engine performs the transformation process on any CIMI
                DCM data instance by applying a set of mapping specifications written in a
                transformation language. </para>
            <para>The mapping specifications are defined at the model (“Meta-Data”) level.
                Specifically, they are based on the structure and contents of a particular CIMI DCM,
                and can only transform data instances conforming to that DCM. Each distinct DCM,
                therefore, requires its own mapping specifications. The mapping specifications are
                also specific to the SOLOR DL model and terminology contents, because the model and
                contents define the allowed outputs of the transformation process. </para>
            <figure xml:id="_Ref494394277">
                <title>Architectural framework for transforming CIMI DCM instances to DL
                    expressions. </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image7.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
        <section>
            <title>Inputs</title>
            <para>The inputs to the transformation process are instances of CIMI DCMs rendered in
                some structured, parse-able language. For purposes of this analysis, we will assume
                that the inputs are rendered in XML, as this is a common syntax for representing
                clinical data (e.g., XML is also used by other standards for modeling patient data,
                such as FHIR and C/CDA). </para>
            <para>Further, the inputs conform to some defined CIMI DCM. <xref
                    linkend="_Ref494372763"/> showed a simple example of such an XML-rendered data
                instance that conforms to a CIMI DCM, specifically the DCM shown in <xref
                    linkend="_Ref494372786"/>.</para>
            <para><xref linkend="_Ref494398277"/> shows another, more complex example of a pain
                observation represented as an XML document. This observation is an instance of the
                more complex CIMI DCM for pain shown in <xref linkend="_Ref494398304"/>, which is
                similar to that in <xref linkend="_Ref494372786"/>, but contains numerous additional
                attributes, such as “duration,” “painRadiation,” and “exacerbatingFactor.” Note that
                certain of the attributes of the DCM are optional (having [0-1] or [0 – M]
                cardinality) and therefore not populated in the DCM instance shown in <xref
                    linkend="_Ref494398277"/>.</para>
            <para>The DCM instance in <xref linkend="_Ref494398277"/> is another example of an input
                to the CIMI-to-SOLOR transformation process. It is the example used in the next
                section to describe the outputs of the transformation process.</para>
            <figure xml:id="_Ref494398277">
                <title>An alternative CIMI DCM instance of a pain observation. </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image8.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <figure xml:id="_Ref494398304">
                <title>An alternative CIMI DCM for pain observations. </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image9.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
        <section xml:id="_Ref494460383">
            <title>Outputs</title>
            <para>The outputs to the transformation process are SOLOR post-coordinated DL
                expressions that are semantically consistent with the input data instances. These
                expressions must conform to three aspects of the SOLOR terminology model</para>
            <orderedlist>
                <listitem>
                    <para><emphasis role="underline">OWL 2 EL Description Logic</emphasis>. SOLOR
                        (like SNOMED-CT) uses just a subset of complete first-order logic to define
                        medical concepts and represent post-coordinated expressions. The OWL 2 EL
                        subset of first-order logic was chosen to ensure polynomial-time inference
                        operations, in particular classification of the large SOLOR terminology
                        corpus. OWL 2 EL definitions and expressions can be represented using a
                        number of equivalent syntaxes, including the SNOMED Expression Grammar,
                        Manchester Syntax, OWL Functional Syntax, OWL/XML syntax, and OWL/RDF
                        syntax. Most examples in this paper use the Manchester Syntax, for clarity
                        and brevity (e.g., see <xref linkend="_Ref494375725"/>). In practice, the
                        output of CIMI-to-SOLOR transformations may best be rendered in OWL
                        Functional Syntax, which is still relatively concise and supported as an
                        input format by most OWL reasoners. <xref linkend="_Ref494460754"/> shows an
                        example of this syntax.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="underline">SOLOR Content Model</emphasis>. SOLOR (like
                        SNOMED-CT) constrains the attributes that can be used to describe each type
                        of medical concept, as well as the allowed values for those attributes. The
                        specification of the allowed attributes and values is called the SOLOR
                        Content Model. <xref linkend="_Ref494400687"/>, for example, shows an
                        excerpt of the SOLOR Concept Model for observations of the type “Clinical
                        Finding”. </para>
                </listitem>
            </orderedlist>
            <figure xml:id="_Ref494400687">
                <title>Excerpt of the SOLOR Concept Model for Clinical Findings</title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image10.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>Note that “Clinical Finding” is the concept type for all pain observations, and
                therefore the SOLOR Concept Model shown in <xref linkend="_Ref494400687"/> specifies
                the set of attributes that can be assigned in the DLs transformation of the CIMI DCM
                instance shown in <xref linkend="_Ref494398277"/>. In particular, a number of the
                attributes allowed by the DCM are not allowed by the SOLOR Concept Model (e.g.,
                “DateOfOnset”, “Duration”, and “ExacerbatingFactor”), which results in their
                necessary exclusion from the transformation result. The mapping specification for
                the DCM must include only the allowed attributes and values to produce valid SOLOR
                DL output results. <xref linkend="_Ref494401653"/> illustrates the attributes of the
                DCM originally shown in <xref linkend="_Ref494398304"/> that must be excluded. Note
                that the DCM attribute “BodyLocationPrecoord” is not excluded, because it maps to
                the semantically equivalent attribute “Finding Site” in the SOLOR Concept
                Model.</para>
            <orderedlist continuation="continues">
                <listitem>
                    <para><emphasis role="underline">SOLOR Terminology Content</emphasis>. Lastly,
                        the transformed CIMI DCM instance can only include references to codes and
                        concepts that already exist within the SOLOR Terminology Model. For example,
                        the value of the “BodyLocationPrecoord” attribute (“Right lower quadrant of
                        abdomen” in the example of <xref linkend="_Ref494398277"/>) can only be
                        transformed to an existing SOLOR concept, or to a nested post-coordinated
                        expression consisting of existing SOLOR concepts and attributes. In this
                        case, the specified value does map to an existing SOLOR concept, “Structure
                        of right lower quadrant of abdomen,” so an accurate translation of that
                        attribute/value pair is possible. </para>
                </listitem>
            </orderedlist>
            <figure xml:id="_Ref494401653">
                <title>Excluded attributes of the CIMI DCM for Pain findings.</title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image11.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>When this set of constraints on the output of DCM-to-CIMI transformations is
                applied, the output of transforming the DCM instance shown in <xref
                    linkend="_Ref494398277"/> is the DL expression shown in <xref
                    linkend="_Ref494535402"/>.</para>
            <figure xml:id="_Ref494535402">
                <title>Description-logic expression that is output of transforming the CIMI DCM
                    instance <xref linkend="_Ref494398277"/>.</title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/image4.png"
                            width="5.5in"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
    </section>
    <section>
        <title>Choice of Transformation Languages</title>
        <para>A number of options exist for expressing the transformation logic for CIMI-to-SOLOR
            translations and for executing the transformation on specific instances of CIMI DCMs.
            This section discusses several of the options and the trade-offs among them.</para>
        <section>
            <title>XSLT</title>
            <para>XSLT is a W3C-standard language for the transformation of structured data<footnote
                    xml:id="__EN5__">
                    <para>
                        <link xmlns:xlink="http://www.w3.org/1999/xlink"
                            xlink:href="https://en.wikipedia.org/wiki/XSLT"
                            >https://en.wikipedia.org/wiki/XSLT</link> (Accessed 9/30/2017).</para>
                </footnote>. XSLT transformation scripts take as input any valid XML document and
                produce as output an ASCII-formatted document (including XML, HTML, other formatting
                languages, free text, etc.). The XSLT language specifies transformations through
                declarative, rule-based commands (see below). </para>
            <para>XSLT is widely used in modern information processing, including in health care
                applications. Numerous XLST transformation engines exist, including commercial and
                open-source versions. These implementations are mature, stable, and
                high-performance, and are available as runtime libraries or embedded in XLST
                authoring/editing applications. Excellent documentation and training are available
                for XSLT.</para>
            <section>
                <title>Overview of Language and Data Model</title>
                <para>XSLT scripts operate over source “trees” containing the structured contents of
                    parsed XML documents. These trees contain as their nodes the various constructs
                    of specific XML documents, i.e., the named elements, attributes, and text values
                    that appear in the documents. <xref linkend="_Ref494398277"/> in the preceding
                    section shows a sample XML document that, upon parsing, becomes a source tree
                    for XSLT transformations. This tree will include the elements “PainAssert”,
                    “Archetype”, and “DateOfOnset”, the attributes “archetypeId” and “dateTime”, and
                    the text values “4784894573” and “2017-04-21 00:00:000”.</para>
                <para>XSLT uses the sub-language “XPath”<footnote xml:id="__EN6__">
                        <para>
                            <link xmlns:xlink="http://www.w3.org/1999/xlink"
                                xlink:href="https://en.wikipedia.org/wiki/XPath"
                                >https://en.wikipedia.org/wiki/XPath</link> (Accessed
                            9/30/2017).</para>
                    </footnote> to reference portions of the XML source tree for purposes of
                    navigating the tree and selecting specific parts of it to translate. XPath is
                    essentially a query language for identifying and retrieving XML sub-trees that
                    match specified criteria. For example, the XPath query</para>
                <para>/PainAssert//Code[@codingSystem != ‘SCT’]/@text</para>
                <para>will return the value of the “text” attribute for every “Code” element that
                    appears within a “PainAssert” element and does not have a “codingSystem”
                    attribute value equal to “SCT”. When executed against the XML document of <xref
                        linkend="_Ref494398277"/>, for example, this query would return the text
                    value “Eating”.</para>
                <para>The actual transformation logic in XLST scripts is specified as a series of
                    “templates”. Each template matches to a specified sub-part of the source tree
                    and specifies what output will be generated for that sub-part. Template are
                    generally called from within other templates via a declarative template-matching
                    process, and a recursive traversal and transformation of the input tree occurs
                    through this template-invocation model. The transformation logic within
                    templates may include various conditional, branching, and formatting constructs,
                    as well as calls to external functions written in various programming languages
                    (such as Java). </para>
                <para><xref linkend="_Ref494459836"/> shows an excerpt from an XSLT transformation
                    script used to transform the CIMI DCM instance in <xref linkend="_Ref494398277"
                    />. Note that the transformation output is specified as any text (including XML
                    elements) that is not preceded by the XML namespace prefix “xsl:”. In this case,
                    the output includes the XML element “SubClassOf”, which is an element name in
                    the OWL/XML syntax used to render the SOLOR DL output of a CIMI-to-SOLOR
                    transformation (see <xref linkend="_Ref494460754"/> for the complete OWL/XML
                    output of the transformation).</para>
                <figure xml:id="_Ref494459836">
                    <title>Sample XSLT Transformation Script.</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="images/image12.png"
                                width="5.5in"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
            <section>
                <title>Example Transformation</title>
                <para>The XSLT excerpt shown in <xref linkend="_Ref494459836"/> is part of a larger
                    XSLT script that can translate any instance of the CIMI DCM specific in <xref
                        linkend="_Ref494398304"/> into an appropriate SOLOR DL expression. In the
                    case of this script, the output is rendered using the OWL/XML Syntax, although
                    (as discussed in Section <xref linkend="_Ref494460383"/>) any number of
                    equivalent syntaxes could be used to render the OWL 2 EL output of the
                    translation.</para>
                <para><xref linkend="_Ref494460754"/> shows the actual result of executing the XSLT
                    script on the CIMI DCM instance shown in <xref linkend="_Ref494398277"/>. The
                    resulting DL expression can be directly loaded into a SOLOR terminology reasoner
                    and classified with respect to all of the other concepts in the terminology. The
                    result of this classification would be the subsumption hierarchy shown in <xref
                        linkend="_Ref494378771"/>, which can be used subsequently to infer that the
                    original CIMI DCM instance matches the query condition for patients with
                    abdominal pain:</para>
                <para>WHERE SOLOR-Expression(Findings) Is-A SOLOR-Code(“Abdominal Pain”)</para>
                <figure xml:id="_Ref494460754">
                    <title>Output of the XSLT script in <xref linkend="_Ref494459836"/> run against
                        the CIMI DCM instance in <xref linkend="_Ref494398277"/>.</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="images/image13.png"
                                width="5.5in"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
            <section>
                <title>Advantages and Limitations</title>
                <para>XSLT is effective in representing and executing the transformation logic
                    needed for CIMI-to-SOLOR translations, at least in a limited set of test cases
                    explored. In general, XSLT provides various advantages, as well as limitations,
                    for this task.</para>
                <para><emphasis role="bold">Advantages</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>A powerful language</para>
                    </listitem>
                    <listitem>
                        <para>Declarative – automated matching of templates to data</para>
                    </listitem>
                    <listitem>
                        <para>Extensible via extension functions and external function calls</para>
                    </listitem>
                    <listitem>
                        <para>Many mature implementations</para>
                    </listitem>
                    <listitem>
                        <para>Good tooling (e.g., Eclipse plugin, XMLSpy)</para>
                    </listitem>
                    <listitem>
                        <para>Good documentation</para>
                    </listitem>
                </itemizedlist>
                <para><emphasis role="bold">Limitations</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>Transformation specifications are verbose and hard to
                            read/understand/debug/maintain</para>
                    </listitem>
                    <listitem>
                        <para>Transformation are entirely syntactic</para>
                    </listitem>
                    <listitem>
                        <para>Limited to XML input – CIMI DCM instances rendered in other formats
                            cannot be translated</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
        <section>
            <title>FHIR Mapping Language</title>
            <para>The FHIR mapping language (FML)<footnote xml:id="__EN7__">
                    <para>
                        <link xmlns:xlink="http://www.w3.org/1999/xlink"
                            xlink:href="https://www.hl7.org/fhir/mapping-language.html"
                            >https://www.hl7.org/fhir/mapping-language.html</link> (Accessed
                        9/30/2017).</para>
                </footnote> is a relatively new, bespoke transformation language specifically
                designed to transform HL7 FHIR<footnote xml:id="__EN8__">
                    <para>
                        <link xmlns:xlink="http://www.w3.org/1999/xlink"
                            xlink:href="https://www.hl7.org/fhir/index.html"
                            >https://www.hl7.org/fhir/index.html</link> (Accessed 9/30/2017).</para>
                </footnote> resources to alternative representations, including different FHIR
                resources, C/CDE documents, etc. The mapping language was created by Graham Grieve
                as a specification of the QVT framework for model-transformation languages (see
                Section <xref linkend="_Ref494462079"/>).</para>
            <section>
                <title>Overview of Language and Data Model</title>
                <para>Conceptually, FML is similar to XSLT in that it (a) consists of declarative
                    rules that are automatically matched to input data, (b) includes a sub-language
                    (“FHIRPath”) to reference parts of source parse trees, and (c) has the ability
                    to reference external functions written in different languages. There are also
                    notable differences between FML and XSLT. FHIR inputs are not constrained to XML
                    documents, but may include any object models and rendering syntaxes conformant
                    with OMG’s Meta Object Facility (MOF) language<footnote xml:id="__EN9__">
                        <para>
                            <link xmlns:xlink="http://www.w3.org/1999/xlink"
                                xlink:href="http://www.omg.org/mof/">http://www.omg.org/mof/</link>
                            (Accessed 9/30/2017).</para>
                    </footnote>. MOF is a general formalism for representing object models as
                    directed acyclic graphs (DAGs), and MOF-compliant models can use various
                    syntactic constructs to represent the classes, attributes, and attribute values
                    of such graphs. </para>
                <para>Hence, in FML, there is no built-in notion of source trees containing XML
                    “elements”, “attributes”, “comments”, “namespaces”, etc. In fact, FML
                    transformation rules do not specify any target syntax for inputs or outputs,
                    just the general concepts of named classes, class members, and member values.
                    This flexibility would allow CIMI-to-SOLOR transformation inputs to be
                    represented in different formats than XML, were that to be deemed preferable.
                    For example, instances rendered using JSON, ODIN<footnote xml:id="__EN10__">
                        <para><link xmlns:xlink="http://www.w3.org/1999/xlink"
                                xlink:href="http://www.openehr.org/releases/BASE/latest/docs/odin/odin.html"
                                >http://www.openehr.org/releases/BASE/latest/docs/odin/odin.html</link>
                            (Accessed 9/30/2017).</para>
                    </footnote>, or ASN1 syntax could be the inputs of FML transformations.</para>
            </section>
            <section>
                <title>Example Transformation</title>
                <para><xref linkend="_Ref494463507"/> shows an excerpt from a transformation script
                    written in the FHIR mapping language. This particular script translates prostate
                    cancer reports formatted in a non- standard HL7 FHIR format<footnote
                        xml:id="__FN3__">
                        <para>In this case, the Royal College of Pathologists of Australasia (RCPA)
                            standard structured report for prostate cancer (see <link
                                xmlns:xlink="http://www.w3.org/1999/xlink"
                                xlink:href="http://fhir.hl7.org.au/fhir/rcpa/prostate.html"
                                >http://fhir.hl7.org.au/fhir/rcpa/prostate.html</link>). </para>
                    </footnote> to equivalent reports formatted as standard FHIR Diagnostic Report
                    resources. Note that the script references classes in the input and output data
                    models, such as “Prostate” and “DiagnosticReport”, respectively. The script may
                    do this because the MOF-compliant models for the input and output instances are
                    specified in the first line of the script, and these models include the
                    “Prostate” and “DiagnosticReport” classes, respectively. Note also how the
                    script iteratively traverses the input instance, first addressing and
                    translating the top-level node (“Prostate”), then addressing its child nodes
                    (“Prostate.subject” and “Prostate.performer”).</para>
                <figure xml:id="_Ref494463507">
                    <title>Sample FHIR Mapping Language script.</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="images/image14.png"
                                width="5.5in"/>
                        </imageobject>
                    </mediaobject>
                </figure>
                <para>The output of an FML transformation is not a text-rendered document (unlike
                    XSLT), but an internally stored DAG consistent with the specified output model
                    (in the case above, the logical model of the FHIR DiagnosticReport resource).
                    Subsequently, the DAG may be rendered in any number of syntaxes, including XML,
                    JSON, or the tables and fields of a relational database. For example, <xref
                        linkend="_Ref494464230"/> and <xref linkend="_Ref494464251"/> show the
                    outputs of the FML transformation script shown in <xref linkend="_Ref494463507"
                    /> rendered as XML and JSON, respectively.</para>
                <figure xml:id="_Ref494464230">
                    <title>Output of the sample FHIR Mapping Language script, rendered as
                        XML.</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="images/image15.png"
                                width="5.5in"/>
                        </imageobject>
                    </mediaobject>
                </figure>
                <figure xml:id="_Ref494464251">
                    <title>Output of the sample FHIR Mapping Language script, rendered as
                        JSON.</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="images/image16.png"
                                width="5.5in"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
            <section>
                <title>Advantages and Limitations</title>
                <para>The FHIR Mapping Language may also be effective in representing and executing
                    the transformation logic needed for CIMI-to-SOLOR translations. As with XSLT,
                    however, there exist certain trade-offs in its use.</para>
                <para><emphasis role="bold">Advantages</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>Support for input formats other than XML</para>
                    </listitem>
                    <listitem>
                        <para>Transformation logic produces semantic DAGs, which can be subsequently
                            rendered in a variety of syntaxes.</para>
                    </listitem>
                    <listitem>
                        <para>The mapping specifications are more concise and easy to
                            read/understand than XLST</para>
                    </listitem>
                </itemizedlist>
                <para><emphasis role="bold">Limitations</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>Inputs/outputs other than FHIR logical models currently require
                            additional custom programming</para>
                    </listitem>
                    <listitem>
                        <para>Only XML and JSON are currently supported as output syntaxes without
                            custom programming</para>
                    </listitem>
                    <listitem>
                        <para>Only one implementation to date (as a library)</para>
                    </listitem>
                    <listitem>
                        <para>Limited tools for authoring/editing transformation scripts</para>
                    </listitem>
                    <listitem>
                        <para>Limited sources of documentation</para>
                    </listitem>
                    <listitem>
                        <para>Few knowledgeable programmers</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
        <section xml:id="_Ref494462079">
            <title>QVT</title>
            <para>A third alternative is to develop a new transformation language customized to
                support the requirements of CIMI-to-SOLOR translations, based on the QVT language
                used to develop the FHIR Mapping Language. </para>
            <section>
                <title>Overview</title>
                <para>QVT<footnote xml:id="__EN11__">
                        <para><link xmlns:xlink="http://www.w3.org/1999/xlink"
                                xlink:href="http://www.omg.org/spec/QVT/1.2/PDF/"
                                >http://www.omg.org/spec/QVT/1.2/PDF/</link> (Accessed
                            9/30/2017).</para>
                    </footnote> is a general model-transformation framework and language developed
                    by the Object Management Group . It includes both an imperative (“QVT-O”) and a
                    declarative (“QVT-R”) version, and offers considerable flexibility in defining
                    the constructs of purpose-specific transformation languages. Although QVT is
                    intended for the transformation of data <emphasis>models</emphasis> rather than
                    data instances, the FHIR Mapping Language shows that it can be applied to the
                    latter task as well.</para>
                <para>A number of implementations of QVT exist as open-source and commercial
                    software offerings. These include:</para>
                <itemizedlist>
                    <listitem>
                        <para>ATL (open source). Probably the most widely used and maintained of the
                            available implementations. Includes a library of existing QVT
                            transformations, to serve as examples and templates.</para>
                    </listitem>
                    <listitem>
                        <para>Eclipse M2M Project (open source). An Eclipse project that includes
                            authoring tools for QVT transformations, as well as various
                            transformation engines (including the one from ATL).</para>
                    </listitem>
                    <listitem>
                        <para>ModelMorf (proprietary)</para>
                    </listitem>
                    <listitem>
                        <para>Others (see <link xmlns:xlink="http://www.w3.org/1999/xlink"
                                xlink:href="https://en.wikipedia.org/wiki/QVT"
                                >https://en.wikipedia.org/wiki/QVT</link>) </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Advantages and Limitations</title>
                <para>The strength of QVT is that it is very abstract, which confers great
                    flexibility and configurability to create custom transformation languages.
                    However, the abstractness also makes QVT quite difficult to understand and
                    learn, and there are limited resources to assist in the learning process. For
                    example, a search on Amazon Books for references on the QVT framework yielded
                    only 8 relevant results, most of which were not in English. In contrast, a
                    similar search for XSLT references returned 270 results.</para>
            </section>
        </section>
        <section>
            <title>Recommendations</title>
            <para>Given the requirements of the CIMI-to-SOLOR transformation task and the features
                of available transformation languages, the following two-pronged approach is
                recommended at this time:</para>
            <orderedlist>
                <listitem>
                    <para>Perform further sample CIMI-to-SOLOR transformations using XSLT. This
                        pilot activity will shed further light on the feasibility of XSLT for the
                        task, the effective use of external functions, and the
                        readability/maintainability of the resulting transformation scripts.</para>
                </listitem>
                <listitem>
                    <para>In parallel, explore the customization and use of a QVT-based
                        transformation language for CIMI-to-SOLOR transformations. This approach
                        will allow for the rendering of CIMI DCM instances in formats other than
                        XML. Pilot use of QVT will enable comparison with XSLT in terms of (a)
                        feasibility, conciseness, and maintainability of transformation scripts, (b)
                        utility of the available tooling and documentation for QVT, and (3) the
                        required customization effort to create a production CIMI-to-SOLOR
                        transformation capability based on QVT.</para>
                </listitem>
            </orderedlist>
        </section>
    </section>
    <section>
        <title>Conclusion</title>
        <para>A semantically correct and efficient model for translating CIMI DCM instances to SOLOR
            DL expressions could confer the benefits of both the object-oriented and
            description-logic models to clinical data management. Reconciliation and translation
            between the two models, however, is in an early phase of exploration. Considerable
            further work, as outlined in this whitepaper, is needed to demonstrate the feasibility
            of such translations and the utility of the resulting DL expressions for data analysis,
            decision support, and quality improvement.</para>
    </section>
</article>
